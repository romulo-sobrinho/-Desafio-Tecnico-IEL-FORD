const fs = require("fs");

const filters = (req, res) => {
  fs.readFile('./models/disney_movies.json', 'utf-8', (error, data) => {
    if(error) {
      //Se ocorrer erro ao ler o documento, retornará status 500 e um json com a mensagem de erro
      res.status(500).json({message: error})
    } else {
      const movies = JSON.parse(data)
      const yearsReverse = []
      const genre = []
  
    movies.forEach(movie => {
      let yearsResult = cutYear(movie.release_date)
      let genreResult = movie.genre
      
      //Verifica se a variável yearsResult não está vazia
      if(yearsResult) {
        //Verifica se existe o ano dentro do array para evitar duplicações
        if (!yearsReverse.includes(yearsResult)) {
          yearsReverse.push(yearsResult)
        }
      }
  
      //Verifica se a variável genreResult não está vazia
      if(genreResult) {
        //Verifica se existe a categoria dentro do array para evitar duplicações
        if (!genre.includes(genreResult)) {
          genre.push(genreResult)
        }
      }
    })
  
    //Ordena o array com os anos dos filmes de forma descrescente conforme o exemplo no arquivo desafio
    const years = yearsReverse.reverse()

    const result = {years, genre}

    //Se der tudo certo, retorna status 200 e o json com os anos e categorias dos filmes
    res.status(200).json(result)
    }
  })
}


const movies = (req, res) => {
  fs.readFile('./models/disney_movies.json', 'utf-8', (error, data) => {
    if(error) {
      //Se ocorrer erro ao ler o documento, retornará status 500 e um json com a mensagem de erro
      res.status(500).json({message: error})
    } else {
      const {filter} = req.body
      const movies = JSON.parse(data)

      //Verifica se years e genre foram passados vazios, caso positivo retorna todos os filmes
      if(!filter.years & !filter.genre) {
        res.status(200).json(movies)
      } else {
        //Dividindo a string recebida pelo filtro com os anos dos filmes
        const yearsWithEmptySpaces = splitString(filter.years)
        //Dividindo a string recebida pelo filtro com os gêneros dos filmes
        const genreWithEmptySpaces = splitString(filter.genre)
        const years = []
        const genre = []
        const movieFound = []

        //Removendo possíveis espaços vazios antes ou depois do ano passado no filtro
        yearsWithEmptySpaces.forEach( yearsRemovingEmptySpaces => {
          years.push(yearsRemovingEmptySpaces.trim())
        })
        
        //Removendo possíveis espaços vazios antes ou depois do gênero passado no filtro
        genreWithEmptySpaces.forEach( genreRemovingEmptySpaces => {
          genre.push(genreRemovingEmptySpaces.trim())
        })

        movies.forEach(movie => {
          //Verifica se existe o ano E o gênero no arquivo disney_movies.json, caso positivo armazena o filme
          if(years.includes(cutYear(movie.release_date)) & genre.includes(movie.genre)) {
            movieFound.push(movie)
          }
        })
    
        if(movieFound) {
          res.status(200).json(movieFound)
        } else {
          res.status(204).json({})
        }
      }
    }
  })
}

//Função que extrai apenas o ano da variável release_date do filme
function cutYear(year) {
  return year.substring(year.length-4)
}

//Função que separa a string
function splitString(string) {
  return string.split(',')
}

module.exports = {filters, movies}